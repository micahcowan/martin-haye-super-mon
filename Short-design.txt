08-23-2011
==========

I realized a few things, which have crystallized into decisions:
- Short is mostly for me. Therefore, my priorities are the ones that matter.
- It doesn't need to be relocatable.
- It doesn't need to fit in 512 bytes.
- I want multiply, divide, and mod.
- I want printf with option for string, hex, and decimal format codes.
- I don't want to rewrite Super-Mon; I'll add hooks that Short can use and that'll
  be enough work right there. Short's assembly and disassembly code will live in low
  RAM.
- Routines that can logically form a statement (e.g. SET, INC) should be implemented
  as Short functions rather than built-in ops. Conversely, routines that only make
  sense in combination should only be ops.
- I need some sort of notation to keep myself from getting mixed up whether the
  code should use pointer val or val. Haven't figured this out yet.
- Everything should be unsigned numbers, not signed.

Encoding:

 16 constants
 24 built-in ops
 88 even zero-page 50.FE
128 memory 4000.BFFF

Built-in Ops
------------

00 CONST00
01 CONST01
..
0F CONST0F

10 ZPVAR b
11 MEMVAR h l   Note: Hi byte then lo byte of address
12 CALL h l     Note: Hi byte then lo byte of address
13 CONSTSTR s	  Note: Stored in hi-ascii except last byte
14 CONSTB b
15 CONSTW h     Note: Hi byte then lo byte of constant

16 ADDW(v,v)    op +
17 SUBW(v,v)    op -
18 ANDW(v,v)    op &
19 ORW(v,v)     op @
1A EORW(v,v)    op ^
1B SHIFTL(v,v)  op <<
1C SHIFTR(v,v)  op >>
1D MULW(v,v)    op *
1E DIVW(v,v)    op /
1F MODW(v,v)    op %
20 CMPLT(v,v)   op <
21 CMPLE(v,v)   op <=
22 CMPEQ(v,v)   op ==
23 CMPNE(v,v)   op !=
24 CMPGE(v,v)   op >=
25 CMPGT(v,v)   op >
26 STRUCTIDX    op .
27 ARRAYIDX     op ]

28 ZPVAR50
29 ZPVAR52
..
7E ZPVARFC
7F ZPVARFE

80 MEMVAR40XX l
81 MEMVAR41XX l
..
FE MEMVARBEXX l
FF MEMVARBFXX l

Built-in functions
------------------

* Not providing GETB, GETW, nor SETB because (a) they're almost useless as the same can be 
  done efficiently in assembly, and (b) they would dereference the location as a pointer 
  which could be dangerous (e.g. an I/O location)
GETPB(var)            Get byte from indirect ptr
GETPW(var)            Get word from indirect ptr
READPB(var)           Get byte from indirect ptr, increment ptr
READPW(var)           Get word from indirect ptr, increment ptr
SETW(var,val)         This is the "=" assignment operator
SETPB(var,val)        Set byte at indirect ptr
SETPW(var,val)        Set word at indirect ptr
WRITEPB(var,val)      Set byte at indirect ptr, increment pointer
WRITEPW(var,val)      Set word at indirect ptr, increment pointer
NOT(val)              Logical invert
INCW(var)             Increment variable, return its final value
DECW(var)             Decrement variable, return its final value
IFT(val,label)        If true, jump to address
IFNOT(val,label)      If false, jump to address
PRSTR(str)            Print string. Can have embedded newline (displayed as "^M")
PRDEC(val)            Print decimal number.
PRINTF(str,val)       Print formatted string: expand a single %d, %s, or %x.
REM(str)              Do nothing (good for embedding comments)
LOOP()                Mark the start of a LOOP..WHILE
WHILE(val)            End of a LOOP..WHILE: if val is 
SETPTR(var,label)     Set variable to an address rather than a value
PUSH(val)             Push value on the stack
POP(var)              Pop value from stack and place into var
MAX(val,val)          Return maximum (unsigned compare) of two values
MIN(val,val)          Return minimum (unsigned compare) of two values
MEMSET(dstvar,len,val)    Set len bytes of memory starting at ptr dstvar to value val
MEMCPY(dstvar,len,srcvar) Copy len bytes from ptr srcvar to ptr dstvar (non-overlap
                          or higher-to-lower only)

Programming notes
=================

- You can use REM just before a function to document how it works without slowing
  anything down.
  
- A short function is recognized because it begins with JSR SHORT0, JSR SHORT1,
  JSR SHORT2, or JSR SHORT3 (denoting 0, 1, 2 or 3 arguments respectively).

- On entry to a short function, A/X will contain the contents of ARG0 (A=hi, X=lo),
  Y reg will be zero, and carry will be clear. No guarantee of N, Z, V flags.
  
- On exit from a short function, A/X should contain the result.

- All numbers are treated as unsigned (for comparison, multiply/divide, print, etc).
  One can use negative numbers for add and subtract (only); they can be created by
  subtracting from zero, e.g. "0-5" will yield 65530 which is the 16-bit 2's complement
  of 5.

Strategy for integration into Super-Mon
=======================================

- If relocation cannot fix a branch, it should print the target address it was trying
  to install, to make it possible for the programmer to fix it.
- Need a more descriptive error when you try to call a Short routine by incorrect label.
  Right now it just says "ERR", leaving no clue as to what kind of error it might be.
- Need a more descriptive error when you try to call a label that isn't a Short function.
  "SYNTAX ERR" isn't cutting it.
- Make MONSRCH also search inside short calls.

[done] Implement translation of 'REM("COMMENT")' to ";COMMENT"
[done] Implement translation of "SETW(VAR,3)" to "VAR=3"
[done] Disable mon-style offsets from Short vars. TRACKBUF+100 should use the "+" op, not be
       an address interpreted directly by Super-Mon.
[done] Implement mon command to convert Hex <-> Dec. "123$" converts dec to hex,
       "$123" converts hex to dec.
[done] It'll be hard, but I really need forward-loop fixing using the X command to work with
       Short code.
[done] Don't clear to end-of-page after assembly
[done] Relocation should also operate on the listing marks -G..-Z
[done] Asm resize needs to relocate refs within the line being assembled.
[done] Get rid of "Tight" check, now that asm resize is working.
[done] If asm replaces a BRK op, extend the size of the new stmt for purposes of resizing
       by one byte. This way, there will always remain a BRK. Then change the default
       Insert size to 1 byte instead of 32. NOTE: this was really hard.
[done] If short disasm wraps to multiple lines, decrease number printed by List command. This
       will help keep things from scrolling off the top.
[done] Get rid of the 3-byte dump for Short disassembly. It just gets in the way when editing.
[done] Clear to end-of-page after ASMLINE relist. Helps when editing complex lines.
[done] Even before starting, I think I should change ops 80.FF to be MEMVAR40xx 
       instead of CALL40xx, because I want the target of IFT to be shorter.
[done] Change tests to account for MEMVAR40xx change
[done] Make a fancier version of INSDS2 (calculates instruction format and length) that 
       accounts for Short calls, and replace uses of INSDS2 with calls to the new routine, 
       except for the one in SCANOPS, which is used while *assembling* a line and should not be changed.
[done] Make a fancier version of INSTDSP (disassembles an instruction) to detect and
       disassemble Short calls. Replace calls to INSTDSP with calls to the new routine.
[done] Make a routine that RELSCAN can call if the opcode is JSR. It would check (PTMP),Y to see
      if it's a JSR to a short routine, and if so would perform any relocations inside the
      short call, and advance PTMP,Y past the call. The convention is that Y is < #$80. OK to
      use QTMP during this, and/or overwrite PTMP and recalculate it on exit.
[done] Make the Klose command detect and properly delete Short lines
[done] Change Short mini-asm to assemble to temporary buf (the stack), and check
       for room before writing to prog. If overwriting a statement in prog space, adjust
       program to make exact room. Also made this work for regular 6502 asm lines.
[done] Save/restore short support during disk ops


Test script for new XBRFIX:

5000.50FFP
5000.50FFZ
5000: LDA #C1
 CMP #C9
 BEQ *
 JSR COUT
 CLC
 ADC #1
 BNE 5002
X
 RTS
5000L
5000.50FFZ
5000: LDA #C1
 CMP #C9
 BEQ *
 BCC *
 BVC *
 JSR COUT
 CLC
 ADC #1
 BNE 5002
X
X
X
 RTS
5000L
5000.50FFP
5000.50FFZ
5000: LDA #C1
 CMP #C9
 BEQ *
 JSR COUT
5082: CLC
 ADC #1
X
5000.50FFP
5000.50FFZ
5000: LDA #C1
 CMP #C9
 BEQ *
 JSR COUT
5083: CLC
 ADC #1
X


Applesoft prime test: 31 sec, 119 bytes
  - can shorten (remove END, NEXT <VAR>, get rid of array clear)
Short prime test: 16 sec, 101 bytes
  - can shorten by adding MEMSET, maybe BUMP or ARRAY to support routines,
    combining bump and IFT into single lines.
  - Will be about 12 statements
Assembly prime test: 1 sec, 98 bytes

---- Notes on XBRFIX ----

XBRFIX Begin:
PCL/16 -> DSTEND

Normal XBRFIX processing:
DSTBEG: Address to store into
MOVELEN: Byte to store

SHXBRFIX Begin:
SHPCSTART: PCL at the beginning of SHXBRFIX
TARGET: $80 (N flag set, V flag clear)

SHBRFIX processing:
SHPCSTART -> DSTBEG (so that XBRFIX can see the $20/JSR)
New bytes -> SHBRTARG/16
Addr to store to -> MOVELEN 

SHBRXSTO End:
SHBRTARG/16: New bytes to store
MOVELEN/16: Address to store them 


Test:

5000.50FFP
5000.50FFZ
5000: IFT(1,*)
 CLC
 ADC #1
X

5000.50FFP
5000.50FFZ
5000: LDA #C1
 CMP #C9
 BCS *
 CLC
 IFT(1,*)
 ADC #1
 BEQ *
 INY
X
X
X

5000.50FFP
5000.50FFZ
5000: ARG1=0
 IFT(ARG1==10,*)
 PRINTF("%D ",ARG1)
 INCW(ARG1)
 JMP 5005
X
A00.11FFP
